import type {SpawnableEntity} from "@dreamlab.gg/core";
import axios from "axios";
import type { EditDetails } from "../../editor";
import { FC, ReactNode, useCallback, useState } from "https://esm.sh/v136/react@18.2.0";
import { Button } from "../ui/buttons";

const getLevelScript = (entities: SpawnableEntity[]) => {
  // Filter out entities tagged as "do not save"
  const toSave = entities
    .filter(entity => !entity.definition.tags.includes('editor/doNotSave'))
    .map(entity => entity.definition)

  const json = JSON.stringify(
    toSave,
    (_key, value) => (value instanceof Set ? [...value] : value),
    2,
  )

  return `
// This file was generated by the Dreamlab editor.
// Entities tagged with 'editor/doNotSave' have not been persisted.
import type { LooseSpawnableDefinition } from '@dreamlab.gg/core'

export const level: LooseSpawnableDefinition[] = ${json}
`.trim()
};


const writeLevelScript = async (levelScript: string, editDetails?: EditDetails) => {
  if (editDetails === undefined) return

  const editUrl = new URL(editDetails.server)
  editUrl.protocol = editUrl.protocol === 'wss' ? 'https' : 'http'
  editUrl.pathname = `/api/v1/edit/${editDetails.instance}/files/level.ts`
  await axios.put(editUrl.toString(), levelScript, { headers: { "Content-Type": "text/plain" } })
}

const Popup: FC<{ onSave(): void, children?: ReactNode }> = ({ onSave, children }) => {
  // TODO: show an "are you sure?" and then have a button with the onSave

  return <div>test</div>
}

export const SaveButton: FC<{ editDetails?: EditDetails, entities: SpawnableEntity[] }> = ({ editDetails, entities }) => {
  const onSave = useCallback(async () => {
    const levelScript = getLevelScript(entities)
    await writeLevelScript(levelScript, editDetails)
    // TODO: commit
  }, [editDetails, entities])

  const [popupVisible, setPopupVisible] = useState(false)

  return <>
    {popupVisible && <Popup onSave={onSave} />}
    <Button onClick={() => setPopupVisible(true)} type='button'>
      Save
    </Button>
  </>
}
