import type { SpawnableEntity } from '@dreamlab.gg/core'
import axios from 'axios'
import type { FC } from 'https://esm.sh/react@18.2.0'
import { useCallback, useState } from 'https://esm.sh/react@18.2.0'
import type { EditDetails } from '../../editor'
import { Button } from '../ui/buttons'

const getLevelScript = (entities: SpawnableEntity[]) => {
  // Filter out entities tagged as "do not save"
  const toSave = entities
    .filter(entity => !entity.definition.tags.includes('editor/doNotSave'))
    .map(entity => entity.definition)

  const json = JSON.stringify(
    toSave,
    (_key, value) => (value instanceof Set ? [...value] : value),
    2,
  )

  return (
    `
// This file was generated by the Dreamlab editor.
// Entities tagged with 'editor/doNotSave' have not been persisted.

/* eslint-disable unicorn/no-abusive-eslint-disable */
/* eslint-disable */

import type { LooseSpawnableDefinition } from '@dreamlab.gg/core'

// prettier-ignore
export const level: LooseSpawnableDefinition[] = ${json}
`.trim() + '\n'
  )
}

const writeLevelScript = async (levelScript: string, editDetails?: EditDetails) => {
  if (editDetails === undefined) return

  const editUrl = new URL(editDetails.server)
  editUrl.protocol = editUrl.protocol === 'wss:' ? 'https' : 'http'
  editUrl.pathname = `/api/v1/edit/${editDetails.instance}/files/src/level.ts`
  await axios.put(editUrl.toString(), levelScript, {
    headers: {
      'Content-Type': 'text/plain',
      Authorization: `Bearer ${editDetails.secret}`,
    },
  })
}

const commitChanges = async (editDetails?: EditDetails) => {
  if (editDetails === undefined) return

  const editUrl = new URL(editDetails.server)
  editUrl.protocol = editUrl.protocol === 'wss:' ? 'https' : 'http'
  editUrl.pathname = `/api/v1/edit/${editDetails.instance}/commit-files`
  await axios.post(
    editUrl.toString(),
    {
      commit_message: 'Generated by dreamlab-game',
      author_name: 'Level Editor',
      author_email: 'editor@git-users.dreamlab.gg',
    },
    {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${editDetails.secret}`,
      },
    },
  )
}

export const SaveButton: FC<{ editDetails?: EditDetails; entities: SpawnableEntity[] }> = ({
  editDetails,
  entities,
}) => {
  const [isSaving, setIsSaving] = useState(false)

  const onSave = useCallback(async () => {
    setIsSaving(true)
    const levelScript = getLevelScript(entities)
    await writeLevelScript(levelScript, editDetails)
    await commitChanges(editDetails)
    setTimeout(() => {
      setIsSaving(false)
    }, 2_000)
  }, [editDetails, entities])

  return (
    <Button
      onClick={onSave}
      style={{
        backgroundColor: isSaving ? 'green' : undefined,
      }}
      type='button'
    >
      {isSaving ? 'Level Saved!' : 'Save Level'}
    </Button>
  )
}
